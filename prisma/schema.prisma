// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model User {
  id        String   @id @default(cuid())
  avatar    String?
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  isActive  Boolean  @default(true)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shoppingList   ShoppingList?
  createdRecipes Recipe[]
  accounts       Account[]
}

enum Unit {
  GRAM
  MILLIGRAM
  KILOGRAM
  POUND
  OUNCE
  MILLILITER
  LITER
  CUP
  TEASPOON
  TABLESPOON
  PIECE
  PINCH
}

model Ingredient {
  id       Int     @id @default(autoincrement())
  name     String
  quantity Float
  unit     Unit
  Recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId Int?
}

model Recipe {
  id               Int          @id @default(autoincrement())
  name             String
  description      String
  steps            String[]
  ingredients      Ingredient[]
  visibility       Visibility   @default(PRIVATE)
  images           String[]
  recipeCategoryId Int
  authorId         String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  category RecipeCategory? @relation(fields: [recipeCategoryId], references: [id])
  author   User            @relation(fields: [authorId], references: [id])
  tag      Tag[]
}

model RecipeCategory {
  id      Int      @id @default(autoincrement())
  name    String
  recipes Recipe[]
}

model Tag {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  recipes Recipe[]
}

model ShoppingList {
  id     Int    @id @default(autoincrement())
  userId String @unique

  user        User     @relation(fields: [userId], references: [id])
  ingredients String[]
}

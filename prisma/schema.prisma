// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum Unit {
  GRAM
  MILLIGRAM
  KILOGRAM
  POUND
  OUNCE
  MILLILITER
  LITER
  CUP
  TEASPOON
  TABLESPOON
  PIECE
  PINCH
}

model Account {
  id                 String    @id @default(cuid(2))
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model User {
  id            String   @id @default(cuid(2))
  avatar        String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  username      String   @unique
  password      String
  firstName     String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          Role     @default(USER)

  verificationToken VerificationToken?
  shoppingList      ShoppingList?
  createdRecipes    Recipe[]
  accounts          Account[]
}

model VerificationToken {
  id      String   @id @default(cuid(2))
  token   String   @unique
  expires DateTime

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  quantity Float
  unit     Unit

  recipeId String
  Recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Recipe {
  id          String     @id @default(cuid(2))
  name        String
  slug        String
  description String
  steps       String[]
  images      String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  visibility  Visibility @default(PRIVATE)

  tag         Tag[]
  ingredients Ingredient[]
  categoryId  Int            @map("recipeCategoryId")
  category    RecipeCategory @relation(fields: [categoryId], references: [id])
  authorId    String
  author      User           @relation(fields: [authorId], references: [id])

  @@unique([slug, id])
}

model RecipeCategory {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  recipes Recipe[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  recipes Recipe[]
}

model ShoppingList {
  id          Int      @id @default(autoincrement())
  ingredients String[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}
